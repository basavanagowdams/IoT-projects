#include <SPI.h>
#include <MFRC522.h>
#include <Arduino.h>
#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>
#include <WiFiClient.h>
#include <WiFiClientSecureBearSSL.h>
#include <LiquidCrystal_I2C.h>
#include <Servo.h>  // Include Servo library

// Define pins
#define RST_PIN D3
#define SS_PIN D4
#define BUZZER D8
#define SERVO_PIN D0  // Servo pin

MFRC522 mfrc522(SS_PIN, RST_PIN);
MFRC522::MIFARE_Key key;  
MFRC522::StatusCode status;      

String card_holder_name;
const String sheet_url = "*************************************************************************************************************************";  // Enter Google Script URL

Servo myServo;  // Create a Servo object

void setup() {
  Serial.begin(9600);
  lcd.init();
  lcd.backlight();
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("  Initializing  ");
  for (int a = 5; a <= 10; a++) {
    lcd.setCursor(a, 1);
    lcd.print(".");
    delay(500);
  }

  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(200);
  }
  Serial.println("WiFi connected.");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());

  pinMode(BUZZER, OUTPUT);
  SPI.begin();
  
  myServo.attach(SERVO_PIN);  // Attach the servo to the defined pin
}

void loop() {
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print(" Scan your Card ");
  mfrc522.PCD_Init();
  
  if (!mfrc522.PICC_IsNewCardPresent()) { return; }
  if (!mfrc522.PICC_ReadCardSerial()) { return; }

  Serial.println(F("Reading last data from RFID..."));
  ReadDataFromBlock(blockNum, readBlockData);
  
  Serial.print(F("Last data in RFID:"));
  Serial.print(blockNum);
  for (int j = 0; j < 16; j++) {
    Serial.write(readBlockData[j]);
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print(String((char*)readBlockData) + " Entered" + "!");
  }
  
  digitalWrite(BUZZER, HIGH);
  delay(200);
  digitalWrite(BUZZER, LOW);
  delay(200);

  // Control the servo based on readBlockData
  if (String((char*)readBlockData) == "animal1") {
    myServo.write(90);  // Rotate to 90 degrees
    delay(3000);        // Wait for 3 seconds
  } else if (String((char*)readBlockData) == "animal2") {
    myServo.write(90);  // Rotate to 90 degrees
    delay(6000);        // Wait for 6 seconds
  } else if (String((char*)readBlockData) == "animal3") {
    myServo.write(90);  // Rotate to 90 degrees
    delay(9000);        // Wait for 9 seconds
  } else if (String((char*)readBlockData) == "animal4") {
    myServo.write(90);  // Rotate to 90 degrees
    delay(12000);       // Wait for 12 seconds
  } else if (String((char*)readBlockData) == "animal5") {
    myServo.write(90);  // Rotate to 90 degrees
    delay(15000);       // Wait for 15 seconds
  }
  myServo.write(0);  // Rotate back to 0 degrees

  if (WiFi.status() == WL_CONNECTED) {
    std::unique_ptr<BearSSL::WiFiClientSecure> client(new BearSSL::WiFiClientSecure);
    client->setInsecure();
    card_holder_name = sheet_url + String((char*)readBlockData);
    card_holder_name.trim();
    Serial.println(card_holder_name);

    HTTPClient https;
    if (https.begin(*client, (String)card_holder_name)) {
      int httpCode = https.GET();
      if (httpCode > 0) {
        Serial.printf("[HTTPS] GET... code: %d\n", httpCode);
        lcd.setCursor(0, 1);
        lcd.print(" Data Recorded ");
        delay(2000);
      } else {
        Serial.printf("[HTTPS] GET... failed, error: %s\n", https.errorToString(httpCode).c_str());
      }
      https.end();
      delay(1000);
    } else {
      Serial.printf("[HTTPS] Unable to connect\n");
    }
  }
}

void ReadDataFromBlock(int blockNum, byte readBlockData[]) { 
  for (byte i = 0; i < 6; i++) {
    key.keyByte[i] = 0xFF;
  }
  
  status = mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, blockNum, &key, &(mfrc522.uid));
  if (status != MFRC522::STATUS_OK) {
    Serial.print("Authentication failed for Read: ");
    Serial.println(mfrc522.GetStatusCodeName(status));
    return;
  } else {
    Serial.println("Authentication success");
  }

  status = mfrc522.MIFARE_Read(blockNum, readBlockData, &bufferLen);
  if (status != MFRC522::STATUS_OK) {
    Serial.print("Reading failed: ");
    Serial.println(mfrc522.GetStatusCodeName(status));
    return;
  } else {
    Serial.println("Block was read successfully");  
  }
}
